body { 
  max-width: 1600px;
  background-color: #333333; /*dark grey*/
  padding:0em;
  margin:0px;
  color: white;
}

.ul{
	text-align: center;
	font-size: 20pt;
	color: #A30000;
	font: font-family: Georgia, "Times New Roman", Times, serif;
	line-height: 20pt;
}

.title{
  font-weight: bold;
  font: Verdana, Geneva, sans-serif;
  color: #0053ad;
  text-align: center;
  font-size: 24pt;
  text-decoration: underline;
}

.paragraph{
	color: #0053ad;
	text-align: center;
	font: 100 25px/1.3 'Lobster Two', Helvetica, sans-serif;
}

.mission{
	color: #0053ad;
	text-align: center;
	font-size: 24pt;
	text-decoration: underline;
}

.foot{
  line-height: 0.7em;
  height:2.8em;
  width:100%;
  text-align: center;
  color: #FFFFFF;
  background-color: #0053ad;
  font-style: bold;
}

div.product{
  width: 100%;
  height: 275px;
  border-top: 5px solid #A30000; /*red*/
  border-bottom: 5px solid #A30000;/*red*/
  }
div.picturebox{
  float:left;
  width:35%;
  height:275px;
  border: 2px solid #A30000;/*red*/
  min-width:304px;
} 
img.picture{
  width: 150px;
  height: 150px;
  border: 3px solid #A30000;/*red*/
  margin: 5em;
  float:left;
  vertical-align: middle;
  display: table-cell;
    }
    
    img.picture1{
  width: 300px;
  height: 250px;
  border: 3px solid #A30000;/*red*/
  margin: .65em 2em;
  float:left;
  vertical-align: middle;
  display: table-cell;

    }

.wrapper2 {
  display: table;
   width: 50%;
   height: auto;
   float:right;
}
	
.wrapper {
   display: table;
   width: 100%;
   height: 258px;
   float: left;
   background-color: white;
}

.c1 {
   display: inline;
   text-align: center;
   vertical-align: middle;
   font-family: Georgia, "Times New Roman", Times, serif;
    font-style: italic;
    width:40%;
    color: #0053ad;
}

.c {
   display: inline;
   text-align: center;
   vertical-align: middle;
   font-family: Georgia, "Times New Roman", Times, serif;
    font-style: italic;
    width:40%;
}

.p {
   display: table-cell;
   text-align: center;
   vertical-align: middle;
   font-family: Georgia, "Times New Roman", Times, serif;
   font-style: italic;
   top:50%;
   height:275px;
   padding-right:3em;
}


.p1 {
   
   text-align: center;
   vertical-align: middle;
   font-family: Georgia, "Times New Roman", Times, serif;
   font-style: italic;
   height:100px;
   width:98%;
   margin: 7% 2em 7% 0;  
}


p.para {
  line-height: 20pt;
  text-align: left;
  margin-left: 4%;
  margin-right: 4%;
  font-size:15pt;
}

div.info {
	font-family: Tahoma, Geneva, sans-serif;
	font-size: 18pt;
	text-align: center;
	margin-top: 4%;
}

#pagewrap {
     
     margin: 0 auto;
}

ul > li > #first{
	margin-left:77px;
}

h1 {
  margin: 0px;
  color: #ffffff; /*white*/
  font-family:'Phosphate Pro', serif;
  text-align: center;
  background-color:#a30000;/*red*/
  clear:left;
  }
  footer {
  margin: 0px;
  color: #ffffff; /*white*/
  font-family:'Phosphate Pro', serif;
  text-align: center;
  background-color:#a30000;/*red*/
  clear: left;
  }
#logo{
  width:5%;
  min-width:60px;
  height:60px;
  margin: 0;
  display:inline;
  float:left;
  background-image: -moz-linear-gradient(top, #3c3c3c 0%, #222222 100%);/*dark grey, darker grey*/
  background: linear-gradient(top, #3c3c3c 0%, #222222 100%);/*dark grey, darker grey*/
  background: -moz-linear-gradient(top, #3c3c3c 0%, #222222 100%);/*dark grey, darker grey*/
  background: -webkit-linear-gradient(top, #3c3c3c 0%, #222222 100%);/*dark grey, darker grey*/
  }
  
  img.pageheader{
  	width:100%;
  	height:250px;
  }
/*-- NAV BAR --*/
/*
	AUTHOR: Osvaldas Valutis, www.osvaldas.info
*/
		#nav
		{
			width:95%; /* 1000 */
			height: 60px;
			font-family: 'Open Sans', sans-serif;
			font-weight: 100;
			position: relative;
			top: 0%;
			left: 0%;
			margin: 0 auto; /* 30 480 */
			z-index:11;
			float:left;
			display:inline;
		}

			#nav > a
			{
				display: none;
				text-decoration: none;
			}

			#nav li
			{
				position: relative;
			}
				#nav li a
				{
					color: #fff; /*white*/
					display: block;
					text-decoration: none;
				}
				#nav li a:active
				{
					background-color: #c00 !important; /*red*/
				}

			#nav span:after
			{
				width: 0;
				height: 0;
				border: 0.313em solid transparent; /* 5 */
				border-bottom: none;
				border-top-color: #a30000; /*red*/
				content: '';
				vertical-align: middle;
				display: inline-block;
				position: relative;
				right: 0em; /* 5 */
			}

			/* first level */
			#nav > ul > .clearfix{
				margin:0px;
			}

			#nav > ul
			{ 
				height: 3.75em; /* 60 */
				list-style-type: none;
				background-image: -moz-linear-gradient(top, #3c3c3c 0%, #222222 100%); /*dark grey, darker grey*/
				background: linear-gradient(top, #3c3c3c 0%, #222222 100%); /*dark grey, darker grey*/
				background: -moz-linear-gradient(top, #3c3c3c 0%, #222222 100%); /*dark grey, darker grey*/
				background: -webkit-linear-gradient(top, #3c3c3c 0%, #222222 100%); /*dark grey, darker grey*/
				margin:0px;
    
			}
				#nav > ul > li
				{
					width: 16.66%;
					height: 100%;
					float: left;
				
				}
				#nav > ul > li > #logo{
					width:30px;
				}
					#nav > ul > li > a
					{
						height: 100%;
						font-size: 1.25em; /* 24 */
						line-height: 2.5em; /* 60 (24) */
						text-align: center;
					}
						#nav > ul > li:not( :last-child ) > a
						{
							border-right: 1px solid #000000; /*black*/
						}
						#nav > ul > li:hover > a,
						#nav > ul:not( :hover ) > li.active > a
						{
							background-color: #a30000;/*red*/
						}


				/* second level */

				#nav li ul
				{
					background-color: #aa0000; /*red*/
					display: none;
					position: absolute;
					top: 100%;
					list-style-type: none;
					z-index:10;
				}
					#nav li:hover ul
					{
						display: block;
						left: 0;
						right: 0;
					}
						#nav li:not( :first-child ):hover ul
						{
							left: -1px;
						}
						#nav li ul a
						{
							font-size: 1em; /* 20 */
							padding: 0.75em; /* 15 (20) */
						}
							#nav li ul li a:hover,
							#nav li ul:not( :hover ) li.active a
							{
								background-color: #333333; /*dark grey*/
							}


		@media only screen and ( max-width: 64.5em ) /* 1000 */
		{
			#nav
			{
				width: 100%;
				position: static;
				margin: 0;
			}
		}

		@media only screen and ( max-width: 60em ) /* 640 */
		{
			html
			{
				font-size: 100%;
			}

			#nav
			{
				position: relative;
				top: auto;
				left: auto;
			}
				#nav > a
				{
					width: 60px;
					height: 3.125em; /* 50 */
					text-align: left;
					text-indent: -9999px;
					background-color: #3a3a3a; /*dark grey*/
					position: relative;
					text-decoration: none;
				}
					#nav > a:before,
					#nav > a:after
					{
						position: absolute;
						border: 2px solid #fff; /*white*/
						top: 35%;
						left: 25%;
						right: 25%;
						content: '';
					}
					#nav > a:after
					{
						top: 60%;
					}

				#nav:not( :target ) > a:first-of-type,
				#nav:target > a:last-of-type
				{
					display: block;
				}


			/* first level */

			#nav > ul
			{
				height: auto;
				display: none;
				position: absolute;
				left: 0;
				right: 0;
			}
				#nav:target > ul
				{
					display: block;
				}
				#nav > ul > li
				{
					width: 100%;
					float: none;
				}
					#nav > ul > li > a
					{
						height: auto;
						text-align: left;
						padding: 0 0.833em; /* 20 (24) */
					}
						#nav > ul > li:not( :last-child ) > a
						{
							border-right: none;
							border-bottom: 1px solid #cc470d;
						}


				/* second level */

				#nav li ul
				{
					position: static;
					padding: 1.25em; /* 20 */
					padding-top: 0;
				}
		}
		
		ul, menu, dir {
    display: block;
    list-style-type: disc;
        -webkit-padding-start: 0px;
        -webkit-margin-before: 0em;
		}
/* http://www.menucool.com */

#sliderFrame, #sliderFrame div {
    box-sizing: content-box;
}
#sliderFrame 
{
    position:relative;
    width:100%;
    margin:0 auto; /*center-aligned*/
}

#slider, #slider div.sliderInner {
    width:100%;height:600px;/* Must be the same size as the slider images */
}

#slider {
	background:#fff url(loading.gif) no-repeat 50% 50%;
	position:relative;
	margin:0 auto; /*center-aligned*/
    transform: translate3d(0,0,0);
    box-shadow: 0px 1px 5px #999999; /*grey*/
}

/* image wrapper */
#slider a.imgLink, #slider div.video {
	z-index:2;
	position:absolute;
	top:160px;left:0px;border:0;padding:0;margin:0;
	width:100%;height:100%;
}
#slider .video {
	background:transparent url(video.png) no-repeat 50% 50%;
}

/* Caption styles */
#slider div.mc-caption-bg, #slider div.mc-caption-bg2 {
	position:absolute;
	width:100%;
	height:auto;
	padding:10px 0;/* 10px will increase the height.*/
	left:0px; /*if the caption needs to be aligned from right, specify by right instead of left. i.e. right:20px;*/
	bottom:0px;/*if the caption needs to be aligned from top, specify by top instead of bottom. i.e. top:150px;*/
	z-index:3;
	overflow:hidden;
	font-size: 0;
}
#slider div.mc-caption-bg 
{
    /* NOTE: Its opacity is to be set through the sliderOptions.captionOpacity setting in the js-image-slider.js file.*/
	background:Black;/* or any other colors such as White, or: background:none; */
}
#slider div.mc-caption-bg2 {
    background:none;
}
#slider div.mc-caption {
	font: bold 14px/20px Arial;
	color:#EEE; /*light grey*/
	z-index:4;
	text-align:center;
    background:none;
}
#slider div.mc-caption a {
	color:#FB0; /*bright red*/
}
#slider div.mc-caption a:hover {
	color:#DA0; /*bright red*/
}


/* ------ built-in navigation bullets wrapper ------*/
/* Note: check themes\2\js-image-slider.css to see how to hide nav bullets */
#slider div.navBulletsWrapper  {
    top:610px;/* Its position is relative to the #slider */
	text-align:center;
	background:none;
	position:relative;
	z-index:5;
}

/* each bullet */
#slider div.navBulletsWrapper div 
{
    width:11px; height:11px;
    font-size:0;color:White;/*hide the index number in the bullet element*/
    background:transparent url(bullet.png) no-repeat 0 0;
    display:inline-block; *display:inline; zoom:1;
    overflow:hidden;cursor:pointer;
    margin:0 6px;/* set distance between each bullet*/
}

#slider div.navBulletsWrapper div.active {background-position:0 -11px;}


/* --------- Others ------- */

#slider div.loading 
{
    width:100%; height:100%;
    background:transparent url(loading.gif) no-repeat 50% 50%;
    filter: alpha(opacity=60);
    opacity:0.6;
    position:relative;
    left:0;
    top:0; 
    z-index:9;
}

#slider img, #slider>b, #slider a>b {
	position:absolute; border:none; display:none;
}

#slider div.sliderInner {
	overflow:hidden; 
	-webkit-transform: rotate(0.000001deg);/* fixed the Chrome not crop border-radius bug*/
	position:absolute; top:0; left:0;
}

#slider>a, #slider video, #slider audio {display:none;}
#slider div {-webkit-transform: translate3d(0,0,0);transform: translate3d(0,0,0);}
js-image-slider.css
Open with
2 of 5 items
bullet.pngjs-image-slider.cssjs-image-slider.jsloading.gifThumbs.db
body {
   margin:0;
   padding:0;
   height:100%;
}
#container {
   min-height:100%;
   position:relative;
}
#header {
   background:#ff0;
   padding:10px;
}
#body {
   padding:10px;
   padding-bottom:60px;   /* Height of the footer */
}
#footer {
   position:absolute;
   bottom:0;
   width:100%;
   height:60px;   /* Height of the footer */
   background:#6cf;
}
/*
  -------------------------------------------------------------------------
            JavaScript Form Validator (gen_validatorv31.js)
              Version 3.1
   Copyright (C) 2003-2008 JavaScript-Coder.com. All rights reserved.
   You can freely use this script in your Web pages.
   You may adapt this script for your own needs, provided these opening credit
    lines are kept intact.
      
   The Form validation script is distributed free from JavaScript-Coder.com
   For updates, please visit:
   http://www.javascript-coder.com/html-form/javascript-form-validation.phtml
   
   Questions & comments please send to support@javascript-coder.com
  -------------------------------------------------------------------------  
*/
function Validator(frmname)
{
  this.formobj=document.forms[frmname];
   if(!this.formobj)
   {
     alert("Error: couldnot get Form object "+frmname);
      return;
   }
   if(this.formobj.onsubmit)
   {
    this.formobj.old_onsubmit = this.formobj.onsubmit;
    this.formobj.onsubmit=null;
   }
   else
   {
    this.formobj.old_onsubmit = null;
   }
   this.formobj._sfm_form_name=frmname;
   this.formobj.onsubmit=form_submit_handler;
   this.addValidation = add_validation;
   this.setAddnlValidationFunction=set_addnl_vfunction;
   this.clearAllValidations = clear_all_validations;
    this.disable_validations = false;//new
    document.error_disp_handler = new sfm_ErrorDisplayHandler();
    this.EnableOnPageErrorDisplay=validator_enable_OPED;
   this.EnableOnPageErrorDisplaySingleBox=validator_enable_OPED_SB;
    this.show_errors_together=true;
    this.EnableMsgsTogether=sfm_enable_show_msgs_together;
}
function set_addnl_vfunction(functionname)
{
  this.formobj.addnlvalidation = functionname;
}
function sfm_enable_show_msgs_together()
{
    this.show_errors_together=true;
    this.formobj.show_errors_together=true;
}
function clear_all_validations()
{
   for(var itr=0;itr < this.formobj.elements.length;itr++)
   {
      this.formobj.elements[itr].validationset = null;
   }
}
function form_submit_handler()
{
   var bRet = true;
    document.error_disp_handler.clear_msgs();
   for(var itr=0;itr < this.elements.length;itr++)
   {
      if(this.elements[itr].validationset &&
      !this.elements[itr].validationset.validate())
      {
        bRet = false;
      }
        if(!bRet && !this.show_errors_together)
        {
          break;
        }
   }
    if(!bRet)
    {
      document.error_disp_handler.FinalShowMsg();
      return false;
    }

   if(this.addnlvalidation)
   {
     str =" var ret = "+this.addnlvalidation+"()";
     eval(str);
    if(!ret) return ret;
   }
   return true;
}
function add_validation(itemname,descriptor,errstr)
{
   var condition = null;
   if(arguments.length > 3)
   {
    condition = arguments[3]; 
   }
  if(!this.formobj)
   {
      alert("Error: The form object is not set properly");
      return;
   }//if
   var itemobj = this.formobj[itemname];
    if(itemobj.length && isNaN(itemobj.selectedIndex) )
    //for radio button; don't do for 'select' item
   {
      itemobj = itemobj[0];
   }  
  if(!itemobj)
   {
      alert("Error: Couldnot get the input object named: "+itemname);
      return;
   }
   if(!itemobj.validationset)
   {
      itemobj.validationset = new ValidationSet(itemobj,this.show_errors_together);
   }
   itemobj.validationset.add(descriptor,errstr,condition);
    itemobj.validatorobj=this;
}
function validator_enable_OPED()
{
    document.error_disp_handler.EnableOnPageDisplay(false);
}

function validator_enable_OPED_SB()
{
   document.error_disp_handler.EnableOnPageDisplay(true);
}
function sfm_ErrorDisplayHandler()
{
  this.msgdisplay = new AlertMsgDisplayer();
  this.EnableOnPageDisplay= edh_EnableOnPageDisplay;
  this.ShowMsg=edh_ShowMsg;
  this.FinalShowMsg=edh_FinalShowMsg;
  this.all_msgs=new Array();
  this.clear_msgs=edh_clear_msgs;
}
function edh_clear_msgs()
{
    this.msgdisplay.clearmsg(this.all_msgs);
    this.all_msgs = new Array();
}
function edh_FinalShowMsg()
{
    this.msgdisplay.showmsg(this.all_msgs);
}
function edh_EnableOnPageDisplay(single_box)
{
   if(true == single_box)
   {
      this.msgdisplay = new SingleBoxErrorDisplay();
   }
   else
   {
      this.msgdisplay = new DivMsgDisplayer();     
   }
}
function edh_ShowMsg(msg,input_element)
{
   
   var objmsg = new Array();
   objmsg["input_element"] = input_element;
   objmsg["msg"] =  msg;
   this.all_msgs.push(objmsg);
}
function AlertMsgDisplayer()
{
  this.showmsg = alert_showmsg;
  this.clearmsg=alert_clearmsg;
}
function alert_clearmsg(msgs)
{

}
function alert_showmsg(msgs)
{
    var whole_msg="";
    var first_elmnt=null;
    for(var m in msgs)
    {
        if(null == first_elmnt)
        {
            first_elmnt = msgs[m]["input_element"];
        }
        whole_msg += msgs[m]["msg"] + "\n";
    }
   
    alert(whole_msg);

    if(null != first_elmnt)
    {
        first_elmnt.focus();
    }
}
function sfm_show_error_msg(msg,input_elmt)
{
    document.error_disp_handler.ShowMsg(msg,input_elmt);
}
function SingleBoxErrorDisplay()
{
 this.showmsg=sb_div_showmsg;
 this.clearmsg=sb_div_clearmsg;
}

function sb_div_clearmsg(msgs)
{
   var divname = form_error_div_name(msgs);
   show_div_msg(divname,"");
}

function sb_div_showmsg(msgs)
{
   var whole_msg="<ul>\n";
   for(var m in msgs)
    {
        whole_msg += "<li>" + msgs[m]["msg"] + "</li>\n";
    }
   whole_msg += "</ul>";
   var divname = form_error_div_name(msgs);
   show_div_msg(divname,whole_msg);
}
function form_error_div_name(msgs)
{
   var input_element= null;

   for(var m in msgs)
   {
    input_element = msgs[m]["input_element"];
    if(input_element){break;}
   }

   var divname ="";
   if(input_element)
   {
    divname = input_element.form._sfm_form_name + "_errorloc";
   }

   return divname;
}
function DivMsgDisplayer()
{
 this.showmsg=div_showmsg;
 this.clearmsg=div_clearmsg;
}
function div_clearmsg(msgs)
{
    for(var m in msgs)
    {
        var divname = element_div_name(msgs[m]["input_element"]);
        show_div_msg(divname,"");
    }
}
function element_div_name(input_element)
{
  var divname = input_element.form._sfm_form_name + "_" + 
                   input_element.name + "_errorloc";

  divname = divname.replace(/[\[\]]/gi,"");

  return divname;
}
function div_showmsg(msgs)
{
    var whole_msg;
    var first_elmnt=null;
    for(var m in msgs)
    {
        if(null == first_elmnt)
        {
            first_elmnt = msgs[m]["input_element"];
        }
        var divname = element_div_name(msgs[m]["input_element"]);
        show_div_msg(divname,msgs[m]["msg"]);
    }
    if(null != first_elmnt)
    {
        first_elmnt.focus();
    }
}
function show_div_msg(divname,msgstring)
{
   if(divname.length<=0) return false;

   if(document.layers)
   {
      divlayer = document.layers[divname];
        if(!divlayer){return;}
      divlayer.document.open();
      divlayer.document.write(msgstring);
      divlayer.document.close();
   }
   else
   if(document.all)
   {
      divlayer = document.all[divname];
        if(!divlayer){return;}
      divlayer.innerHTML=msgstring;
   }
   else
   if(document.getElementById)
   {
      divlayer = document.getElementById(divname);
        if(!divlayer){return;}
      divlayer.innerHTML =msgstring;
   }
   divlayer.style.visibility="visible";   
   return false;
}
function ValidationDesc(inputitem,desc,error,condition)
{
  this.desc=desc;
   this.error=error;
   this.itemobj = inputitem;
   this.condition = condition;
   this.validate=vdesc_validate;
}
function vdesc_validate()
{
   if(this.condition != null )
   {
      if(!eval(this.condition))
      {
         return true;
      }
   }
   if(!validateInput(this.desc,this.itemobj,this.error))
   {
      this.itemobj.validatorobj.disable_validations=true;
      this.itemobj.focus();
      return false;
   }
   return true;
}
function ValidationSet(inputitem,msgs_together)
{
    this.vSet=new Array();
   this.add= add_validationdesc;
   this.validate= vset_validate;
   this.itemobj = inputitem;
    this.msgs_together = msgs_together;
}
function add_validationdesc(desc,error,condition)
{
  this.vSet[this.vSet.length]= 
  new ValidationDesc(this.itemobj,desc,error,condition);
}
function vset_validate()
{
    var bRet = true;
    for(var itr=0;itr<this.vSet.length;itr++)
    {
        bRet = bRet && this.vSet[itr].validate();
        if(!bRet && !this.msgs_together)
        {
            break;
        }
    }
    return bRet;
}
function validateEmail(email)
{
    var splitted = email.match("^(.+)@(.+)$");
    if(splitted == null) return false;
    if(splitted[1] != null )
    {
      var regexp_user=/^\"?[\w-_\.]*\"?$/;
      if(splitted[1].match(regexp_user) == null) return false;
    }
    if(splitted[2] != null)
    {
      var regexp_domain=/^[\w-\.]*\.[A-Za-z]{2,4}$/;
      if(splitted[2].match(regexp_domain) == null) 
      {
       var regexp_ip =/^\[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\]$/;
       if(splitted[2].match(regexp_ip) == null) return false;
      }// if
      return true;
    }
return false;
}

function IsCheckSelected(objValue,chkValue)
{
    var selected=false;
   var objcheck = objValue.form.elements[objValue.name];
    if(objcheck.length)
   {
      var idxchk=-1;
      for(var c=0;c < objcheck.length;c++)
      {
         if(objcheck[c].value == chkValue)
         {
           idxchk=c;
          break;
         }//if
      }//for
      if(idxchk>= 0)
      {
        if(objcheck[idxchk].checked=="1")
        {
          selected=true;
        }
      }//if
   }
   else
   {
      if(objValue.checked == "1")
      {
         selected=true;
      }//if
   }//else  

   return selected;
}
function TestDontSelectChk(objValue,chkValue,strError)
{
   var pass = true;
   pass = IsCheckSelected(objValue,chkValue)?false:true;

   if(pass==false)
   {
     if(!strError || strError.length ==0) 
        { 
         strError = "Can't Proceed as you selected "+objValue.name;  
        }//if          
     sfm_show_error_msg(strError,objValue);
     
   }
    return pass;
}
function TestShouldSelectChk(objValue,chkValue,strError)
{
   var pass = true;

   pass = IsCheckSelected(objValue,chkValue)?true:false;

   if(pass==false)
   {
     if(!strError || strError.length ==0) 
        { 
         strError = "You should select"+objValue.name;  
        }//if          
     sfm_show_error_msg(strError,objValue);
     
   }
    return pass;
}
function TestRequiredInput(objValue,strError)
{
 var ret = true;
    if(eval(objValue.value.length) == 0) 
    { 
       if(!strError || strError.length ==0) 
       { 
         strError = objValue.name + " : Required Field"; 
       }//if 
       sfm_show_error_msg(strError,objValue); 
       ret=false; 
    }//if 
return ret;
}
function TestMaxLen(objValue,strMaxLen,strError)
{
 var ret = true;
    if(eval(objValue.value.length) > eval(strMaxLen)) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name + " : "+ strMaxLen +" characters maximum "; 
      }//if 
      sfm_show_error_msg(strError,objValue); 
      ret = false; 
    }//if 
return ret;
}
function TestMinLen(objValue,strMinLen,strError)
{
 var ret = true;
    if(eval(objValue.value.length) <  eval(strMinLen)) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name + " : " + strMinLen + " characters minimum  "; 
      }//if               
      sfm_show_error_msg(strError,objValue); 
      ret = false;   
    }//if 
return ret;
}
function TestInputType(objValue,strRegExp,strError,strDefaultError)
{
   var ret = true;

    var charpos = objValue.value.search(strRegExp); 
    if(objValue.value.length > 0 &&  charpos >= 0) 
    { 
     if(!strError || strError.length ==0) 
      { 
        strError = strDefaultError;
      }//if 
      sfm_show_error_msg(strError,objValue); 
      ret = false; 
    }//if 
 return ret;
}
function TestEmail(objValue,strError)
{
var ret = true;
     if(objValue.value.length > 0 && !validateEmail(objValue.value)   ) 
     { 
       if(!strError || strError.length ==0) 
       { 
          strError = objValue.name+": Enter a valid Email address "; 
       }//if                                               
       sfm_show_error_msg(strError,objValue); 
       ret = false; 
     }//if 
return ret;
}
function TestLessThan(objValue,strLessThan,strError)
{
var ret = true;
     if(isNaN(objValue.value)) 
     { 
       sfm_show_error_msg(objValue.name +": Should be a number ",objValue); 
       ret = false; 
     }//if 
     else
     if(eval(objValue.value) >=  eval(strLessThan)) 
     { 
       if(!strError || strError.length ==0) 
       { 
         strError = objValue.name + " : value should be less than "+ strLessThan; 
       }//if               
       sfm_show_error_msg(strError,objValue); 
       ret = false;                 
      }//if   
return ret;          
}
function TestGreaterThan(objValue,strGreaterThan,strError)
{
var ret = true;
     if(isNaN(objValue.value)) 
     { 
       sfm_show_error_msg(objValue.name+": Should be a number ",objValue); 
       ret = false; 
     }//if 
    else
     if(eval(objValue.value) <=  eval(strGreaterThan)) 
      { 
        if(!strError || strError.length ==0) 
        { 
          strError = objValue.name + " : value should be greater than "+ strGreaterThan; 
        }//if               
        sfm_show_error_msg(strError,objValue);  
        ret = false;
      }//if  
return ret;           
}
function TestRegExp(objValue,strRegExp,strError)
{
var ret = true;
    if( objValue.value.length > 0 && 
        !objValue.value.match(strRegExp) ) 
    { 
      if(!strError || strError.length ==0) 
      { 
        strError = objValue.name+": Invalid characters found "; 
      }//if                                                               
      sfm_show_error_msg(strError,objValue); 
      ret = false;                   
    }//if 
return ret;
}
function TestDontSelect(objValue,dont_sel_value,strError)
{
var ret = true;
     if(objValue.value == null) 
     { 
       sfm_show_error_msg("Error: dontselect command for non-select Item",objValue); 
       ret = false; 
     } 
    else
     if(objValue.value == dont_sel_value) 
     { 
      if(!strError || strError.length ==0) 
       { 
        strError = objValue.name+": Please Select one option "; 
       }//if                                                               
       sfm_show_error_msg(strError,objValue); 
       ret =  false;                                   
      } 
return ret;
}
function TestSelectOneRadio(objValue,strError)
{
   var objradio = objValue.form.elements[objValue.name];
   var one_selected=false;
   for(var r=0;r < objradio.length;r++)
   {
     if(objradio[r].checked == "1")
     {
      one_selected=true;
      break;
     }
   }
   if(false == one_selected)
   {
      if(!strError || strError.length ==0) 
       {
       strError = "Please select one option from "+objValue.name;
      }  
     sfm_show_error_msg(strError,objValue);
   }
return one_selected;
}

function TestFileExtension(objValue,cmdvalue,strError)
{
    var ret=false;
    var found=false;

    if(objValue.value.length <= 0)
    {//The 'required' validation is not done here
        return true;
    }
   
    var extns = cmdvalue.split(";");
    for(var i=0;i < extns.length;i++)
    {
        ext = objValue.value.substr(objValue.value.length - extns[i].length,extns[i].length);
        ext = ext.toLowerCase();
        if(ext == extns[i])
        {
            found=true;break;
        }
    }
    if(!found)
    {
       if(!strError || strError.length ==0) 
       { 
         strError = objValue.name + " allowed file extensions are: "+cmdvalue; 
       }//if 
       sfm_show_error_msg(strError,objValue); 
       ret=false;        
    }
    else
    {
        ret=true;
    }
    return ret;
}


function validateInput(strValidateStr,objValue,strError) 
{ 
    var ret = true;
    var epos = strValidateStr.search("="); 
    var  command  = ""; 
    var  cmdvalue = ""; 
    if(epos >= 0) 
    { 
     command  = strValidateStr.substring(0,epos); 
     cmdvalue = strValidateStr.substr(epos+1); 
    } 
    else 
    { 
     command = strValidateStr; 
    } 
    switch(command) 
    { 
        case "req": 
        case "required": 
         { 
         ret = TestRequiredInput(objValue,strError)
           break;             
         }//case required 
        case "maxlength": 
        case "maxlen": 
          { 
          ret = TestMaxLen(objValue,cmdvalue,strError)
             break; 
          }//case maxlen 
        case "minlength": 
        case "minlen": 
           { 
          ret = TestMinLen(objValue,cmdvalue,strError)
             break; 
            }//case minlen 
        case "alnum": 
        case "alphanumeric": 
           { 
            ret = TestInputType(objValue,"[^A-Za-z0-9]",strError, 
                  objValue.name+": Only alpha-numeric characters allowed ");
            break; 
           }
        case "alnum_s": 
        case "alphanumeric_space": 
           { 
            ret = TestInputType(objValue,"[^A-Za-z0-9\\s]",strError, 
                  objValue.name+": Only alpha-numeric characters and space allowed ");
            break; 
           }         
        case "num": 
        case "numeric": 
           { 
                ret = TestInputType(objValue,"[^0-9]",strError, 
                  objValue.name+": Only digits allowed ");
                break;               
           }
        case "alphabetic": 
        case "alpha": 
           { 
                ret = TestInputType(objValue,"[^A-Za-z]",strError, 
                  objValue.name+": Only alphabetic characters allowed ");
                break; 
           }
        case "alphabetic_space": 
        case "alpha_s": 
           { 
                ret = TestInputType(objValue,"[^A-Za-z\\s]",strError, 
                  objValue.name+": Only alphabetic characters and space allowed ");
                break; 
           }
        case "email": 
          { 
            ret = TestEmail(objValue,strError);
               break; 
          }
        case "lt": 
        case "lessthan": 
         { 
            ret = TestLessThan(objValue,cmdvalue,strError);
              break; 
         }
        case "gt": 
        case "greaterthan": 
         { 
         ret = TestGreaterThan(objValue,cmdvalue,strError);
            break; 
         }//case greaterthan 
        case "regexp": 
         { 
         ret = TestRegExp(objValue,cmdvalue,strError);
           break; 
         }
        case "dontselect": 
         { 
          ret = TestDontSelect(objValue,cmdvalue,strError)
             break; 
         }
      case "dontselectchk":
      {
         ret = TestDontSelectChk(objValue,cmdvalue,strError)
         break;
      }
      case "shouldselchk":
      {
         ret = TestShouldSelectChk(objValue,cmdvalue,strError)
         break;
      }
      case "selone_radio":
      {
         ret = TestSelectOneRadio(objValue,strError);
          break;
      }
      case "file_extn":
      {
         ret = TestFileExtension(objValue,cmdvalue,strError);
         break;
      }      
    }//switch 
   return ret;
}
function VWZ_IsListItemSelected(listname,value)
{
 for(var i=0;i < listname.options.length;i++)
 {
  if(listname.options[i].selected == true &&
   listname.options[i].value == value) 
   {
     return true;
   }
 }
 return false;
}
function VWZ_IsChecked(objcheck,value)
{
 if(objcheck.length)
 {
     for(var c=0;c < objcheck.length;c++)
     {
       if(objcheck[c].checked == "1" && 
        objcheck[c].value == value)
       {
        return true; 
       }
     }
 }
 else
 {
  if(objcheck.checked == "1" )
   {
    return true; 
   }    
 }
 return false;
}
/*
   Copyright (C) 2003-2008 JavaScript-Coder.com . All rights reserved.
*/

